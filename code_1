import sys

def escape_text(text):
    return text.replace('\\', '\\\\').replace('(', '\\(').replace(')', '\\)')

def wrap_line(line, max_chars):
    """Wraps a line into chunks of max_chars."""
    return [line[i:i+max_chars] for i in range(0, len(line), max_chars)]

def create_pdf(input_path, output_path):
    with open(input_path, 'r') as txt_file:
        lines = txt_file.readlines()

    with open(output_path, 'wb') as pdf:
        # Start of PDF
        pdf.write(b"%PDF-1.7\n")  # Updated version

        objects = []
        offsets = []

        # 1. Font Object
        font_obj = b"1 0 obj\n<< /Type /Font /Subtype /Type1 /BaseFont /Courier >>\nendobj\n"
        objects.append(font_obj)

        # 2. Content Stream (with wrapping and smaller font)
        text_lines = "BT /F1 8 Tf 72 800 Td\n"  # Start at top with 8pt font
        for line in lines:
            line = line.rstrip()
            wrapped_lines = wrap_line(line, 85)  # Adjust max_chars for width
            for wline in wrapped_lines:
                escaped = escape_text(wline)
                text_lines += f"({escaped}) Tj\n0 -10 Td\n"  # Move to next line
        text_lines += "ET"
        text_stream = text_lines.encode('latin1')
        content_obj = b"2 0 obj\n<< /Length %d >>\nstream\n%s\nendstream\nendobj\n" % (len(text_stream), text_stream)
        objects.append(content_obj)

        # 3. Page Object
        page_obj = b"3 0 obj\n<< /Type /Page /Parent 4 0 R /Contents 2 0 R /Resources << /Font << /F1 1 0 R >> >> >>\nendobj\n"
        objects.append(page_obj)

        # 4. Pages Object
        pages_obj = b"4 0 obj\n<< /Type /Pages /Kids [3 0 R] /Count 1 >>\nendobj\n"
        objects.append(pages_obj)

        # 5. Catalog
        catalog_obj = b"5 0 obj\n<< /Type /Catalog /Pages 4 0 R >>\nendobj\n"
        objects.append(catalog_obj)

        # Write objects and track offsets
        for obj in objects:
            offsets.append(pdf.tell())
            pdf.write(obj)

        # xref table
        xref_offset = pdf.tell()
        pdf.write(f"xref\n0 {len(objects)+1}\n".encode())
        pdf.write(b"0000000000 65535 f \n")
        for offset in offsets:
            pdf.write(f"{offset:010d} 00000 n \n".encode())

        # trailer
        pdf.write(b"trailer\n")
        pdf.write(f"<< /Size {len(objects)+1} /Root 5 0 R >>\n".encode())
        pdf.write(b"startxref\n")
        pdf.write(f"{xref_offset}\n".encode())
        pdf.write(b"%%EOF\n")

    print(f"\nâœ… Clean PDF generated at: {output_path}\n")

# --- Main ---
if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: python txt_to_pdf_clean.py input.txt output.pdf")
        sys.exit(1)

    create_pdf(sys.argv[1], sys.argv[2])
