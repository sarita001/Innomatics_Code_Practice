import os
import time
import pandas as pd
from selenium import webdriver
from selenium.webdriver.edge.options import Options
from selenium.webdriver.common.by import By
import win32com.client as win32

# Load the input Excel
df = pd.read_excel("input.xlsx")

# Create screenshots folder
os.makedirs("screenshots", exist_ok=True)

options = Options()
options.use_chromium = True
driver = webdriver.Edge(options=options)
driver.get("https://your-regw-url.com")  # Replace with real URL
driver.maximize_window()
time.sleep(5)  # Wait for page to load or SSO to complete

summary = []

for index, row in df.iterrows():
    txn_id = str(row['Transaction ID'])
    expected_amt = str(row['Expected Amount'])
    expected_date = str(row['Expected Date'])

    try:
        # Fill inputs (update element locators with actual IDs or XPaths)
        driver.find_element(By.ID, "transaction_input").clear()
        driver.find_element(By.ID, "transaction_input").send_keys(txn_id)

        driver.find_element(By.ID, "from_date").clear()
        driver.find_element(By.ID, "from_date").send_keys(expected_date)

        driver.find_element(By.ID, "to_date").clear()
        driver.find_element(By.ID, "to_date").send_keys(expected_date)

        # Click search
        driver.find_element(By.ID, "search_button").click()
        time.sleep(2)

        # Click View Attachment
        driver.find_element(By.LINK_TEXT, "View Attachment").click()
        time.sleep(2)

        # Check if amount/date is present in the page
        page_source = driver.page_source
        status = "Matched" if expected_amt in page_source and expected_date in page_source else "Not Matched"

        # Screenshot
        screenshot_path = f"screenshots/{txn_id}.png"
        driver.save_screenshot(screenshot_path)

    except Exception as e:
        status = "Error"
        screenshot_path = "None"
        print(f"❌ Failed for Transaction {txn_id}: {e}")

    # Add to summary
    summary.append({
        "Transaction ID": txn_id,
        "Expected Amount": expected_amt,
        "Expected Date": expected_date,
        "Status": status,
        "Screenshot": screenshot_path
    })


summary_df = pd.DataFrame(summary)
summary_file = "screenshots/summary_report.xlsx"
summary_df.to_excel(summary_file, index=False)


successes = summary_df[summary_df['Status'] == 'Matched']
failures = summary_df[summary_df['Status'] == 'Not Matched']

body = f"""
Hi Team,

Please find attached the Reg W submission summary report for today.

✅ Matched Transactions: {len(successes)}
❌ Not Matched Transactions: {len(failures)}

Screenshots are saved here: {os.path.abspath("screenshots")}

Regards,
RegW Automation Bot
"""

outlook = win32.Dispatch('outlook.application')
mail = outlook.CreateItem(0)
mail.To = 'user@example.com'  # Replace with actual team email
mail.Subject = 'Daily Reg W Review Summary Report'
mail.Body = body
mail.Attachments.Add(os.path.abspath(summary_file))
mail.Send()

print("✅ Email sent successfully.")




















import pandas as pd

def read_excel_config(file_path, sheet_name=0):
    """
    Reads an Excel sheet into a dictionary using 'Key' and 'Value' columns.

    :param file_path: Path to the Excel file.
    :param sheet_name: Sheet name or index (default is first sheet).
    :return: Dictionary with config key-value pairs.
    """
    try:
        df = pd.read_excel(file_path, sheet_name=sheet_name)
        
        if 'Key' not in df.columns or 'Value' not in df.columns:
            raise ValueError("Excel file must contain 'Key' and 'Value' columns.")
        
        config_dict = pd.Series(df.Value.values, index=df.Key).to_dict()
        return config_dict

    except Exception as e:
        print(f"Error reading config file: {e}")
        return {}

# Example usage
if __name__ == "__main__":
    config = read_excel_config("config.xlsx")
    print("Config Loaded:", config)
    # You can now use config['db_host'], config['region'], etc.

