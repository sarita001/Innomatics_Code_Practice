# advanced_logger.py

import logging
import os
from logging.handlers import RotatingFileHandler
from colorlog import ColoredFormatter

def setup_advanced_logger(
    log_dir="logs",
    log_file="app.log",
    error_file="error.log",
    max_bytes=5*1024*1024,  # 5 MB
    backup_count=3,
    log_level=logging.DEBUG
):
    os.makedirs(log_dir, exist_ok=True)
    
    logger = logging.getLogger()
    logger.setLevel(log_level)

    if logger.hasHandlers():
        logger.handlers.clear()

    # === File Handler (All logs) ===
    all_logs_path = os.path.join(log_dir, log_file)
    file_handler = RotatingFileHandler(all_logs_path, maxBytes=max_bytes, backupCount=backup_count)
    file_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    file_handler.setFormatter(file_formatter)
    logger.addHandler(file_handler)

    # === Error File Handler (Only errors) ===
    error_logs_path = os.path.join(log_dir, error_file)
    error_handler = RotatingFileHandler(error_logs_path, maxBytes=max_bytes, backupCount=backup_count)
    error_handler.setLevel(logging.ERROR)
    error_handler.setFormatter(file_formatter)
    logger.addHandler(error_handler)

    # === Console Handler (Colored) ===
    console_handler = logging.StreamHandler()
    console_formatter = ColoredFormatter(
        "%(log_color)s%(asctime)s - %(levelname)s - %(message)s",
        log_colors={
            'DEBUG': 'cyan',
            'INFO': 'green',
            'WARNING': 'yellow',
            'ERROR': 'red',
            'CRITICAL': 'bold_red'
        }
    )
    console_handler.setFormatter(console_formatter)
    logger.addHandler(console_handler)

    return logger


# Optional: Convenience methods
def log_debug(msg): logging.getLogger().debug(msg)
def log_info(msg): logging.getLogger().info(msg)
def log_warning(msg): logging.getLogger().warning(msg)
def log_error(msg): logging.getLogger().error(msg)
def log_critical(msg): logging.getLogger().critical(msg)





# Sample usage: main.py
from advanced_logger import (
    setup_advanced_logger,
    log_info,
    log_warning,
    log_error,
    log_debug,
    log_critical
)

setup_advanced_logger()

log_debug("Debug: This is for developers.")
log_info("Info: Script started successfully.")
log_warning("Warning: Low memory.")
log_error("Error: File not found.")
log_critical("Critical: System failure imminent.")




Given all code changes, configuration updates, and scripts are deployed successfully,
When the system components are executed under normal operational conditions,
Then the following outcomes must be met to consider the deployment successful:

The DER EMEA Owner Ref match process completes faster with optimized performance.

All production jobs using the updated service ID authenticate and run without failure.

RegE transmissions are successfully redirected to the Recon1 endpoint with no data loss.

Frontier job logs are delivered to SPM Ontime via API and acknowledged successfully.

The Python script reliably calls the SPM API, handles responses, and logs results.

SCP file transfers to OBIEE and IASS succeed using updated, RHEL 9â€“compliant scripts.

DFR Pre-DEPT allocation logic correctly handles holidays based on the calendar file.

All upstream and downstream connectivity checks post-RHEL 9 upgrade pass without issue.



















Objectives:
To enhance job performance, update service credentials, redirect data flows, automate log transmission via API, modernize SCP scripts, and validate system connectivity post-upgrade.

Rationale:
These changes are necessary to improve efficiency, maintain security compliance, support automation, and ensure readiness for the RHEL 9 environment.

Outcome:
Post-deployment, all systems are expected to perform as intended with improved stability, secure integrations, and verified operational continuity.

Impacted Areas:
DER, Recon, SPM Ontime, DFR, OBIEE, IASS, RHEL 9 systems

Impact Description:
Changes affect data flow, job performance, log transmission, allocation logic, and RHEL 9 compatibility. No downtime expected; all updates are tested and backward-compatible.

Dependent Areas:
Job schedulers, database configurations, network infrastructure, API endpoints, RHEL 9 environment

Dependent Description:
Successful deployment relies on the proper configuration of job schedulers, network connectivity for data routing, API availability for log transmission, and RHEL 9 environment readiness. Any issues in these areas may impact the deployment's success.


Risk Description:
Risks include connectivity issues, RHEL 9 compatibility problems, API log transmission failures, and misconfigurations in data redirection or holiday logic.

Risk Mitigation Plan:
Test thoroughly in staging, implement API retries, monitor critical components during deployment, and ensure quick team coordination for issue resolution.




